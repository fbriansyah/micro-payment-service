// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: outlet.sql

package postgresdb

import (
	"context"

	"github.com/google/uuid"
)

const createOutlet = `-- name: CreateOutlet :one
INSERT INTO outlets ("user", deposit)
VALUES ($1, $2)
RETURNING id, "user", deposit, is_active
`

type CreateOutletParams struct {
	User    uuid.UUID `json:"user"`
	Deposit int64     `json:"deposit"`
}

func (q *Queries) CreateOutlet(ctx context.Context, arg CreateOutletParams) (Outlet, error) {
	row := q.db.QueryRowContext(ctx, createOutlet, arg.User, arg.Deposit)
	var i Outlet
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Deposit,
		&i.IsActive,
	)
	return i, err
}

const getOutletByUserID = `-- name: GetOutletByUserID :one
SELECT id, "user", deposit, is_active FROM outlets
WHERE "user" = $1 LIMIT 1
`

func (q *Queries) GetOutletByUserID(ctx context.Context, user uuid.UUID) (Outlet, error) {
	row := q.db.QueryRowContext(ctx, getOutletByUserID, user)
	var i Outlet
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Deposit,
		&i.IsActive,
	)
	return i, err
}

const updateOutletDeposit = `-- name: UpdateOutletDeposit :one
UPDATE outlets
SET deposit = $1
WHERE id = $2
RETURNING id, "user", deposit, is_active
`

type UpdateOutletDepositParams struct {
	Deposit int64     `json:"deposit"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOutletDeposit(ctx context.Context, arg UpdateOutletDepositParams) (Outlet, error) {
	row := q.db.QueryRowContext(ctx, updateOutletDeposit, arg.Deposit, arg.ID)
	var i Outlet
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Deposit,
		&i.IsActive,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transaction.sql

package postgresdb

import (
	"context"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions
(
    bill_number, 
    product, 
    inquiry, 
    payment, 
    amount, 
    refference_number, 
    outlet, 
    status
)
VALUES
($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING id, bill_number, product, transaction_datetime, inquiry, payment, amount, refference_number, outlet, status
`

type CreateTransactionParams struct {
	BillNumber       string        `json:"bill_number"`
	Product          string        `json:"product"`
	Inquiry          uuid.NullUUID `json:"inquiry"`
	Payment          uuid.NullUUID `json:"payment"`
	Amount           int64         `json:"amount"`
	RefferenceNumber string        `json:"refference_number"`
	Outlet           uuid.UUID     `json:"outlet"`
	Status           int32         `json:"status"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.BillNumber,
		arg.Product,
		arg.Inquiry,
		arg.Payment,
		arg.Amount,
		arg.RefferenceNumber,
		arg.Outlet,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.BillNumber,
		&i.Product,
		&i.TransactionDatetime,
		&i.Inquiry,
		&i.Payment,
		&i.Amount,
		&i.RefferenceNumber,
		&i.Outlet,
		&i.Status,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, bill_number, product, transaction_datetime, inquiry, payment, amount, refference_number, outlet, status FROM transactions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.BillNumber,
		&i.Product,
		&i.TransactionDatetime,
		&i.Inquiry,
		&i.Payment,
		&i.Amount,
		&i.RefferenceNumber,
		&i.Outlet,
		&i.Status,
	)
	return i, err
}
